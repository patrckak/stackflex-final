{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ghost/OneDrive/Desktop/a/src/src/lib/actions.tsx"],"sourcesContent":["import { prisma } from \"@/lib/prisma\";\nimport { auth } from \"../../auth\";\nimport { ComparePasswords } from \"@/components/db/crypt\";\n\nexport async function getSession() {\n  const session = await auth();\n  if (!session?.user) return null;\n  return session?.user;\n}\n\nexport async function validarCPF(cpf: string) {\n  cpf = cpf.replace(/\\D/g, \"\"); // Remove tudo que não for dígito\n\n  if (cpf.length !== 11 || /^(\\d)\\1+$/.test(cpf)) {\n    return false; // Verifica se o CPF tem 11 dígitos e não é sequência de números iguais\n  }\n\n  let soma = 0;\n  let resto;\n\n  // Validação do primeiro dígito verificador\n  for (let i = 1; i <= 9; i++)\n    soma += parseInt(cpf.substring(i - 1, i)) * (11 - i);\n  resto = (soma * 10) % 11;\n  if (resto === 10 || resto === 11) resto = 0;\n  if (resto !== parseInt(cpf.substring(9, 10))) return false;\n\n  soma = 0;\n  // Validação do segundo dígito verificador\n  for (let i = 1; i <= 10; i++)\n    soma += parseInt(cpf.substring(i - 1, i)) * (12 - i);\n  resto = (soma * 10) % 11;\n  if (resto === 10 || resto === 11) resto = 0;\n  if (resto !== parseInt(cpf.substring(10, 11))) return false;\n\n  return true;\n}\n\nexport async function createEstimate(data: any) {\n  const { cpf, date, desc, clientId } = data;\n\n  let created = await prisma.user.update({\n    select: { public_id: cpf },\n    where: { public_id: cpf },\n    data: {\n      Estimates: {\n        create: {\n          clientId: clientId,\n          date: date,\n          description: desc,\n          items: \"{ 1: {nome: teste, valor: 35, un: unidade}}\",\n        },\n      },\n    },\n  });\n  if (!created) {\n    return { msg: \"erro ao gerar orçamento, contate o suporte.\", status: 0 };\n  } else {\n    return { msg: `orçamento criado com sucesso. ` };\n  }\n}\n\nexport async function getUserAuth(cpf: any, password: any) {\n  let userExits = await prisma.user.findUnique({ where: { public_id: cpf } });\n  if (userExits) {\n    const passwordMatch = await ComparePasswords(password, userExits.password);\n    if (passwordMatch) {\n      return {\n        name: userExits.firstname,\n        image: userExits.avatar,\n        role: userExits.id,\n        storeId: userExits.cnpj,\n        cpf: userExits.public_id,\n      };\n    } else {\n      return null;\n    }\n  }\n  return null;\n}\n"],"names":[],"mappings":";;;;;;;;;;;AACA;;;;;;;;;AAGO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,oGAAA,CAAA,OAAI,AAAD;IACzB,IAAI,CAAC,SAAS,MAAM,OAAO;IAC3B,OAAO,SAAS;AAClB;AAEO,eAAe,WAAW,GAAW;IAC1C,MAAM,IAAI,OAAO,CAAC,OAAO,KAAK,iCAAiC;IAE/D,IAAI,IAAI,MAAM,KAAK,MAAM,YAAY,IAAI,CAAC,MAAM;QAC9C,OAAO,OAAO,uEAAuE;IACvF;IAEA,IAAI,OAAO;IACX,IAAI;IAEJ,2CAA2C;IAC3C,IAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IACtB,QAAQ,SAAS,IAAI,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;IACrD,QAAQ,AAAC,OAAO,KAAM;IACtB,IAAI,UAAU,MAAM,UAAU,IAAI,QAAQ;IAC1C,IAAI,UAAU,SAAS,IAAI,SAAS,CAAC,GAAG,MAAM,OAAO;IAErD,OAAO;IACP,0CAA0C;IAC1C,IAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IACvB,QAAQ,SAAS,IAAI,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;IACrD,QAAQ,AAAC,OAAO,KAAM;IACtB,IAAI,UAAU,MAAM,UAAU,IAAI,QAAQ;IAC1C,IAAI,UAAU,SAAS,IAAI,SAAS,CAAC,IAAI,MAAM,OAAO;IAEtD,OAAO;AACT;AAEO,eAAe,eAAe,IAAS;IAC5C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;IAEtC,IAAI,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;QACrC,QAAQ;YAAE,WAAW;QAAI;QACzB,OAAO;YAAE,WAAW;QAAI;QACxB,MAAM;YACJ,WAAW;gBACT,QAAQ;oBACN,UAAU;oBACV,MAAM;oBACN,aAAa;oBACb,OAAO;gBACT;YACF;QACF;IACF;IACA,IAAI,CAAC,SAAS;QACZ,OAAO;YAAE,KAAK;YAA+C,QAAQ;QAAE;IACzE,OAAO;QACL,OAAO;YAAE,KAAK,CAAC,8BAA8B,CAAC;QAAC;IACjD;AACF;AAEO,eAAe,YAAY,GAAQ,EAAE,QAAa;IACvD,IAAI,YAAY,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,WAAW;QAAI;IAAE;IACzE,IAAI,WAAW;QACb,MAAM,gBAAgB,MAAM,iBAAiB,UAAU,UAAU,QAAQ;QACzE,IAAI,eAAe;YACjB,OAAO;gBACL,MAAM,UAAU,SAAS;gBACzB,OAAO,UAAU,MAAM;gBACvB,MAAM,UAAU,EAAE;gBAClB,SAAS,UAAU,IAAI;gBACvB,KAAK,UAAU,SAAS;YAC1B;QACF,OAAO;YACL,OAAO;QACT;IACF;IACA,OAAO;AACT"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ghost/OneDrive/Desktop/a/src/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { Prisma } from \"@prisma/client\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { getUserAuth } from \"@/lib/actions\";\nimport type { Provider } from \"next-auth/providers\";\n\nconst providers: Provider[] = [\n  Credentials({\n    credentials: {\n      user: { label: \"CPF\", name: \"user\" },\n      password: { label: \"Senha\", type: \"password\", name: \"password\" },\n    },\n\n    authorize: async (credentials) => {\n      const c = {\n        cpf: credentials?.user,\n        password: credentials?.password,\n      };\n\n      if (c) {\n        let user = await getUserAuth(c.cpf, c.password);\n        return user;\n      } else {\n        return null;\n      }\n    },\n  }),\n];\n\nexport const providerMap = providers\n  .map((provider) => {\n    if (typeof provider === \"function\") {\n      const providerData = provider();\n      return { id: providerData.id, name: providerData.name };\n    } else {\n      return { id: provider.id, name: provider.name };\n    }\n  })\n  .filter((provider) => provider.id !== \"credentials\");\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  pages: {\n    signIn: \"/auth/login\",\n    signOut: \"/auth/signout\",\n  },\n  providers,\n  adapter: PrismaAdapter(Prisma),\n  secret: process.env.AUTH_SECRET,\n  callbacks: {\n    async jwt({ token, user }: any) {\n      /* TODO adicionar refresh token ao session object  */\n      if (user) {\n        token.name = user.name;\n        token.cpf = user.cpf;\n        token.image = user.image;\n        token.role = user.role;\n        token.storeId = user.storeId;\n      }\n      return token;\n    },\n    session({ session, token }) {\n      if (token && session.user) {\n        session.user.name = token.name;\n        session.user.cpf = token.cpf;\n        session.user.image = token.picture;\n        session.user.role = token.role;\n        session.user.storeId = token.storeId;\n      }\n      return session;\n    },\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60,\n    updateAge: 24 * 60 * 60,\n  },\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AADA;AAHA;;;;;;AAOA,MAAM,YAAwB;IAC5B,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;QACV,aAAa;YACX,MAAM;gBAAE,OAAO;gBAAO,MAAM;YAAO;YACnC,UAAU;gBAAE,OAAO;gBAAS,MAAM;gBAAY,MAAM;YAAW;QACjE;QAEA,WAAW,OAAO;YAChB,MAAM,IAAI;gBACR,KAAK,aAAa;gBAClB,UAAU,aAAa;YACzB;YAEA,wCAAO;gBACL,IAAI,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,cAAW,AAAD,EAAE,EAAE,GAAG,EAAE,EAAE,QAAQ;gBAC9C,OAAO;YACT,OAAO;;YAEP;QACF;IACF;CACD;AAEM,MAAM,cAAc,UACxB,GAAG,CAAC,CAAC;IACJ,IAAI,OAAO,aAAa,YAAY;QAClC,MAAM,eAAe;QACrB,OAAO;YAAE,IAAI,aAAa,EAAE;YAAE,MAAM,aAAa,IAAI;QAAC;IACxD,OAAO;QACL,OAAO;YAAE,IAAI,SAAS,EAAE;YAAE,MAAM,SAAS,IAAI;QAAC;IAChD;AACF,GACC,MAAM,CAAC,CAAC,WAAa,SAAS,EAAE,KAAK;AAEjC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IAC1D,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA;IACA,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,6HAAA,CAAA,SAAM;IAC7B,QAAQ,QAAQ,GAAG,CAAC,WAAW;IAC/B,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAO;YAC5B,mDAAmD,GACnD,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,GAAG,GAAG,KAAK,GAAG;gBACpB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,OAAO,GAAG,KAAK,OAAO;YAC9B;YACA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,GAAG,GAAG,MAAM,GAAG;gBAC5B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,OAAO;gBAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;YACtC;YACA,OAAO;QACT;IACF;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;QACvB,WAAW,KAAK,KAAK;IACvB;AACF"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ghost/OneDrive/Desktop/a/src/src/app/not-found.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport ThemedSection from \"@/components/ui/themedSection\";\r\nimport { House } from \"lucide-react\";\r\nimport Link from \"next/link\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { auth } from \"../../auth\";\r\n\r\nconst NotFound = async () => {\r\n  const session = await auth();\r\n\r\n  if (session) {\r\n    return (\r\n      <ThemedSection>\r\n        <span className=\"text-center flex-col flex gap-2\">\r\n          <h3>Página não encontrada :(</h3>\r\n          <h6 className=\"text-sm\">StackFlex - v1.1</h6>\r\n          <Link href=\"/app/dashboard\">\r\n            <Button>\r\n              Dashboard <House />\r\n            </Button>\r\n          </Link>\r\n        </span>\r\n      </ThemedSection>\r\n    );\r\n  } else {\r\n    return (\r\n      <ThemedSection>\r\n        <span className=\"text-center flex-col flex gap-2\">\r\n          <h3>Página não encontrada :(</h3>\r\n          <h6 className=\"text-sm\">StackFlex - v1.1</h6>\r\n          <Link href=\"/\">\r\n            <Button>\r\n              Página Inicial <House />\r\n            </Button>\r\n          </Link>\r\n        </span>\r\n      </ThemedSection>\r\n    );\r\n  }\r\n};\r\n\r\nexport default NotFound;\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAKA;AAEA;AAHA;AAJA;;;;;;;AASA,MAAM,WAAW;IACf,MAAM,UAAU,MAAM,CAAA,GAAA,oGAAA,CAAA,OAAI,AAAD;IAEzB,IAAI,SAAS;QACX,qBACE,8OAAC;sBACC,cAAA,8OAAC;gBAAK,WAAU;;kCACd,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCAAU;;;;;;kCACxB,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;kCACT,cAAA,8OAAC;;gCAAO;8CACI,8OAAC,oMAAA,CAAA,QAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;IAM5B,OAAO;QACL,qBACE,8OAAC;sBACC,cAAA,8OAAC;gBAAK,WAAU;;kCACd,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;wBAAG,WAAU;kCAAU;;;;;;kCACxB,8OAAC,4JAAA,CAAA,UAAI;wBAAC,MAAK;kCACT,cAAA,8OAAC;;gCAAO;8CACS,8OAAC,oMAAA,CAAA,QAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMjC;AACF;uCAEe"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}